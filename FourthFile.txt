Commands:

- gitdemo is an sample directory where git repo is being created
- To start a git project got the directory where git repo needs to be created.
gitdemo> git init

- to persist the key (SHA1 hash) value (content) in git
gitdemo>  echo “Hello World” | git hash-object --stdin -w
1397e058de953666d69b91f6bde15a049d92d145

- to peek into git (this opens a file manager or finder window in Mac)
gitdemo> open .git 

- to see the type of file created
gitdemo> git cat-file 1397e058de953666d69b91f6bde15a049d92d145 -t 
blob

To print the content of the file (p=pretty print)
gitdemo> git cat-file 1397e058de953666d69b91f6bde15a049d92d145 -p
“Hello World”
==========================
Creating a new project “cookbook” to follow along:

cookbook> git init

- to see the files and folders in the project
cookbook> git status

- to stage files for a commit
cookbook> git add <filename>
git add menu.txt
Or
cookbook> git add < dir name>
git add recipes/

- to see files that are staged (ie ready to be committed)
cookbook> git status

- to issue a commit with a message
cookbook> git commit -m “First Commit”

- check the staging area (it should show no files to be committed)
cookbook> git status

- to see the list of existing commits
cookbook> git log

- to see the last 2 commits
cookbook> git log -2


- to see the content of the commit
Cookbook> git cat-file -p <committ’s hash value>

- If changes are made to a file
- check status first to confirm there pending file(s) to be committed
- then stage the modified files
- then issue a commit
- check commit has occurred by issuing log command
cookbook> git status
cookbook> git add <filename>
cookbook>git add menu.txt
cookbook> git commit -m <message>
cookbook>git commit -m “added cake”
cookbook> git log

- to check how many object are present in a git project
cookbook> git count-objects

- to create an annotated tag
cookbook> git tag -a mytag -m “first annotated tag”

- to check tag name
cookbook> git tag

- to check contents of the tag (it can check based on tag name too)
cookbook> git cat-file -p mytag

To Check for branches:
cookbook> git branch	

To see the contents in the brach file (master):
cookbook> cat .git/refs/heads/master

To create a new branch:
cookbook> git branch <branchname>
cookbook> git branch Lisa

- if changes are made to a file now
- check status first to confirm there pending file(s) to be committed
- then stage the modified files
- then issue a commit
- issue a log command and note the hash value
- verify the master branch is referencing new commit
- confirm HEAD is pointing to master

cookbook> git status
cookbook> git add <filename>
cookbook>git add recipes/menu.txt
cookbook> git commit -m <message>
cookbook>git commit -m “added recipe”
cookbook> git log
cookbook> cat .git/refs/heads/master
cookbook> cat .git/HEAD

- Changing current branch
- issue the checkout command
- verify the head is pointing to the new branch
- issue log command and verify latest commit is same as in new branch file
- confirm contents of the file that has changed, if possible
 
cookbook> git checkout <branchname>
cookbook> git .git/HEAD
cookbook> git log
cookbook> cat .git/refs/heads/<branchname>
cookbook> cat recipes/apple_pie.txt

- make changes to a file (current branch is new branch not master)
- issue status command verify there are pending changes to be staged
- issue add command to stage the changed files
- issue commit
- issue log command to see new commit’s hash value
- open .git/refs/heads/<branchname> to confirm it has the same has value as the latest commit
- verify HEAD is point to <branchname>

cookbook>git status
cookbook>git add recipes/apple_pie.txt
cookbook>git commit -m “sample message”
cookbook>git log
cookbook>cat .git/refs/heads/<branchname>
cookbook>cat .git/HEAD

To Merge:
========
- lets merge 2 branches master and Lisa
- HEAD is pointing to master
- to merge with Lisa
cookbook> git merge lisa

- if there was no conflict merge is complete

-if there is a conflict 
- issue git status to find the conflict
- correct the contents of the file manually
- stage the modified file
- commit the modified file (without message, git will prompt a default message, accept it)
- this completes the merge
- issue log command to see the new hash value
- issue cat-file to see the contents of the commit, verify that it has 2 parents
- A merge has 2 parents (regular commit as 1 parent)

cookbook> git status
<manual correction of conflict file, via vi or notepad or ide…etc>
cookbook> git add <filename>
cookbook>git commit
cookbook>git log
cookbook>git cat-file -p <new commit’s hash value>

Fast-Forward:
===============
- when a merge is done from or to a branch to which there is already merge
- in the case of Fast-Forward git just moves the branch and head references to latest commit

Detached Head scenario:
===================
- when the HEAD is referencing a commit directly and the commit is not referenced by a branch, it is a detached head scenario
- To get into detached HEAD situation following things need to be done:
1. issue a git log command so that commit’s has values can be see
2. Checkout using hash value of the commit (git checkout <hash value>)
3. At this point the HEAD is referencing the commit and not the branch
4. Make changes to a file
5. Stage the files (git add)
6. Commit the changes (git commit -m <message>)
7. The HEAD moves to the new commit and the HEAD is detached (DETACHED HEAD)
- at this point we have 2 options 
1. loose the changes: Move the HEAD towards a branch (git checkout <branchname>) and the changes will be garbage collected at some point
2. persist the changes: create a new brach (git branch <branchname>) for the commit referenced by detached HEAD

3 simple rules:
============
1. Current branch tracks new commits (git commit or git merge moves the current brach to that commit, in detached head situation head moves to the new commit)
2. When you move to a commit (git checkout <branchname>), git replaces your working directory with the git objects reference by the new commit. 
3. Unreachable objects (blob, tree, commit or tag) that cannot be reached by a branch, head or tag is considered dead and will be garbage collected


Rebasing:
============
- rebase unifies 2 diverging branches
- it is similar to merge but different: merge has 2 parents after merge where as rebase has 1 parent after rebase
- to rebase
> git rebase <branchname>

Tags:
=====
- tags are like branches that never move
- there are 2 types of tags

- annotated tags (these are git objects)
>git tag -a <tagname>

- lite-weight tags (not git objects)
>git tag <tagname>

- to see the info in tags
>cat .git/refs/tags/<tagname>

Distributed Version control (ie local and remote git):
=======================================================
- to clone a project from remote to local
> git clone <url for the repo>

- to see the config file
> cat .git/config
- the config files shows remote brach and local branch info and how they map to each other 

- to see all the branches	(local and remote)
>git branch —-all

- to see all branches which have master in their name
> git show-ref master

- if you want push the changes from local to remote
- check which commits the local and remote branches are pointing to 
>git show-ref master
- if they are different that mean there changes to be pushed to remote
>git push
>git show-ref master (to verify the both branches have same hash value)

- it is recommended that you always sync up your local repo with remote prior to pushing the changes
- this way if there are conflicts they can be resolved on you local repo and not mess up the remote repo
- the steps are git fetch, git merge and then git push
- git fetch + git merge = git pull
- so the steps are git pull and then git push

> git pull
> git push

- import point to note: never rebase commits that were already pushed to remote repo
